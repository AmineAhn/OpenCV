/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package devoiropencv;

import devoiropencv.CompteDirhams.coins.Coin;
import devoiropencv.CompteDirhams.coins.DetectionDirham;
import devoiropencv.CompteDirhams.rapport.Rapport;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import static java.lang.Thread.sleep;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import org.opencv.core.Mat;
import org.opencv.core.MatOfRect;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;
import org.opencv.objdetect.CascadeClassifier;

public final class TestForm extends javax.swing.JFrame {

    public static boolean bt1bool = false;
    public static boolean bt2bool = false;
    public static boolean bt3bool = false;
   
    public TestForm() 
    {
        initComponents();
    }
    
    public void populateBox(JComboBox jcb) {
        ArrayList<String> list = new ArrayList<>();
        if(bt1.isFocusOwner())
        {
            list.add("Image 1");
        }
        else if(bt2.isFocusOwner())
        {
            list.add("Image 1");
            list.add("Image 2");
        }
        else if(bt3.isFocusOwner())
        {
            list.add("Image 1");
        }
        jcb.setModel(new DefaultComboBoxModel(list.toArray()));
        
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cbox = new javax.swing.JComboBox<>();
        btOk = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        bt3 = new javax.swing.JButton();
        bt2 = new javax.swing.JButton();
        bt1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        img1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        img2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1200, 650));
        setResizable(false);
        setSize(new java.awt.Dimension(1200, 650));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(227, 230, 232));
        jPanel1.setMaximumSize(new java.awt.Dimension(1200, 650));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(27, 47, 71));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setMaximumSize(new java.awt.Dimension(1050, 50));
        jPanel2.setMinimumSize(new java.awt.Dimension(1050, 50));
        jPanel2.setPreferredSize(new java.awt.Dimension(1050, 50));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Choisissez un image : ");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 6, 190, 30));

        cbox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel2.add(cbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, 200, -1));

        btOk.setText("OK");
        btOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOkActionPerformed(evt);
            }
        });
        jPanel2.add(btOk, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 10, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, -1, -1));

        jPanel3.setBackground(new java.awt.Color(27, 47, 71));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setMaximumSize(new java.awt.Dimension(150, 650));
        jPanel3.setMinimumSize(new java.awt.Dimension(150, 650));
        jPanel3.setName(""); // NOI18N
        jPanel3.setPreferredSize(new java.awt.Dimension(150, 650));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bt3.setBackground(new java.awt.Color(27, 47, 71));
        bt3.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        bt3.setForeground(new java.awt.Color(255, 255, 255));
        bt3.setText("Détection Dirham");
        bt3.setMaximumSize(new java.awt.Dimension(160, 35));
        bt3.setMinimumSize(new java.awt.Dimension(160, 35));
        bt3.setPreferredSize(new java.awt.Dimension(130, 35));
        bt3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt3ActionPerformed(evt);
            }
        });
        jPanel3.add(bt3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, -1, 80));

        bt2.setBackground(new java.awt.Color(27, 47, 71));
        bt2.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        bt2.setForeground(new java.awt.Color(255, 255, 255));
        bt2.setText("Calcul Dirhams");
        bt2.setMaximumSize(new java.awt.Dimension(160, 35));
        bt2.setMinimumSize(new java.awt.Dimension(160, 35));
        bt2.setPreferredSize(new java.awt.Dimension(130, 35));
        bt2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt2ActionPerformed(evt);
            }
        });
        jPanel3.add(bt2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, -1, 70));

        bt1.setBackground(new java.awt.Color(27, 47, 71));
        bt1.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        bt1.setForeground(new java.awt.Color(255, 255, 255));
        bt1.setText("Contours");
        bt1.setMaximumSize(new java.awt.Dimension(160, 35));
        bt1.setMinimumSize(new java.awt.Dimension(160, 35));
        bt1.setPreferredSize(new java.awt.Dimension(130, 35));
        bt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt1ActionPerformed(evt);
            }
        });
        jPanel3.add(bt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 125, -1, 70));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        img1.setText("jLabel1");
        jPanel4.add(img1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 490, 490));

        jLabel7.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel7.setText("Image originale");
        jLabel7.setMaximumSize(new java.awt.Dimension(410, 24));
        jLabel7.setMinimumSize(new java.awt.Dimension(410, 24));
        jLabel7.setPreferredSize(new java.awt.Dimension(410, 24));
        jPanel4.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 6, 480, -1));

        jPanel5.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 510, 560));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setMaximumSize(new java.awt.Dimension(510, 560));
        jPanel6.setMinimumSize(new java.awt.Dimension(510, 560));
        jPanel6.setPreferredSize(new java.awt.Dimension(440, 560));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel6.setText("Image Résultat");
        jLabel6.setMaximumSize(new java.awt.Dimension(410, 24));
        jLabel6.setMinimumSize(new java.awt.Dimension(410, 24));
        jLabel6.setPreferredSize(new java.awt.Dimension(410, 24));
        jPanel6.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 480, -1));

        img2.setText("jLabel2");
        jPanel6.add(img2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 48, 490, 490));

        jPanel5.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, 500, 560));

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 60, 1040, 580));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt3ActionPerformed
        bt1bool = false;
        bt2bool = false;
        bt3bool = true ;
        populateBox(cbox);
    }//GEN-LAST:event_bt3ActionPerformed

    private void bt2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt2ActionPerformed
        // TODO add your handling code here:
        bt1bool = false;
        bt2bool = true;
        bt3bool = false ;
        
        populateBox(cbox);
        
    }//GEN-LAST:event_bt2ActionPerformed

    private void bt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt1ActionPerformed
        // TODO add your handling code here:
        bt1bool = true ;
        bt2bool = false;
        bt3bool = false;
        
        populateBox(cbox);
        
    }//GEN-LAST:event_bt1ActionPerformed

    private void btOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOkActionPerformed
        // TODO add your handling code here:
        if(bt1bool)
        {
            String cheminFichier = "src/images/A/"+Integer.toString(cbox.getSelectedIndex()+1)+".png";
            Mat Image = util.LireImg(cheminFichier);
            if(Image == null)
            {
                ErreurImage();
                System.out.println("Erreur d'ouverture de fichier: " + cheminFichier);
            }
            else 
            {   
                img1.setText(null);
                boolean rOw = resizeIfNeeded(Image, img1.getWidth(), img1.getHeight());
                this.setOriginalImage(Image);
                Mat ImageGray = util.ImageEnGray(Image);
                //util.AfficherImage(ImageGray, " IMAGE EN GRAY ");
                img2.setText(null);
                rOw = resizeIfNeeded(ImageGray, img1.getWidth(), img1.getHeight());
                this.setNewImage(ImageGray);
                try {
                    sleep(500);
                } catch (InterruptedException ex) {
                    Logger.getLogger(TestForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                int rayon = 3; // rayon 
                Mat ImageAvecContours = util.TrouverContour(Image, ImageGray, rayon);
                rOw = resizeIfNeeded(ImageAvecContours, img1.getWidth(), img1.getHeight());
                this.setNewImage(ImageAvecContours);
                //util.AfficherImage(ImageAvecContours, " DETECTION CONTOURS ");
            }
        }
        else if(bt2bool)
        {
            String cheminFichier = "src/images/B/"+Integer.toString(cbox.getSelectedIndex()+1)+".png";
            Mat Image = util.LireImg(cheminFichier);
            if(Image == null)
            {
                ErreurImage();
                System.out.println("Erreur d'ouverture de fichier: " + cheminFichier);
            }
            else 
            {
                img1.setText(null);
                ArrayList<Coin> COINS  = DetectionDirham.detecterDirham(Image);
                Mat ImageCercles = DetectionDirham.dessinerDirham(Image);
                boolean rOw = resizeIfNeeded(Image, img1.getWidth(), img1.getHeight());
                this.setOriginalImage(Image);
                img2.setText(null);
                rOw = resizeIfNeeded(ImageCercles, img1.getWidth(), img1.getHeight());
                this.setNewImage(ImageCercles);
                ArrayList<Rapport> ALIR = Rapport.GetBaseRapports();
                DetectionDirham.RetrouverValeur(COINS, ALIR);
                double total = DetectionDirham.CalculerTotal(COINS);
                JOptionPane.showMessageDialog(rootPane, " LE TOTAL EST : " + total);
            }
            
	}
        else if(bt3bool)
        {
            String cheminFichier = "src/images/C/"+Integer.toString(cbox.getSelectedIndex()+1)+".png";
            Mat img = util.LireImg(cheminFichier);
            Mat imgCopy = util.LireImg(cheminFichier);
            
            if(img == null)
            {
                ErreurImage();
            }
            else
            {
                img1.setText(null);
                boolean rOw = resizeIfNeeded(imgCopy, img1.getWidth(), img1.getHeight());
                this.setOriginalImage(imgCopy);
                
                CascadeClassifier cs = new CascadeClassifier("src/data/one.xml");
		MatOfRect m = new MatOfRect();
                Mat res = img;
		cs.detectMultiScale(res, m);
		for (Rect rect : m.toArray()) 
                {
                    Imgproc.rectangle(res, new Point(rect.x, rect.y), new Point(rect.x
			+ rect.width, rect.y + rect.height), new Scalar(0, 255, 0));
		}
		img2.setText(null);
                rOw = resizeIfNeeded(res, img1.getWidth(), img1.getHeight());
                this.setNewImage(res);
                JOptionPane.showMessageDialog(rootPane, "COORDONNÉES DETECTION : \n" + m.dump());
		//util.AfficherImage(res, "DETECTION DU DIRHAM");
                
            }
        }
    }//GEN-LAST:event_btOkActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt1;
    private javax.swing.JButton bt2;
    private javax.swing.JButton bt3;
    private javax.swing.JButton btOk;
    private javax.swing.JComboBox<String> cbox;
    private javax.swing.JLabel img1;
    private javax.swing.JLabel img2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    // End of variables declaration//GEN-END:variables

    private void ErreurImage() 
    {
        JOptionPane.showMessageDialog(rootPane, "Cette image n'est plus disponible");
    }
    
    public Image toBufferedImage(Mat matrix){
		int type = BufferedImage.TYPE_BYTE_GRAY;
		if ( matrix.channels() > 1 ) {
			type = BufferedImage.TYPE_3BYTE_BGR;
		}
		int bufferSize = matrix.channels()*matrix.cols()*matrix.rows();
		byte [] buffer = new byte[bufferSize];
		matrix.get(0,0,buffer); // get all the pixels
		BufferedImage image = new BufferedImage(matrix.cols(),matrix.rows(), type);
		final byte[] targetPixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
		System.arraycopy(buffer, 0, targetPixels, 0, buffer.length);  
		return image;
	}
    
    public void setOriginalImage(Mat image)
    {
        Image loadedImage = toBufferedImage(image);
        img1.setIcon(new ImageIcon(loadedImage));
    }
    
    public void setNewImage(Mat image)
    {
        Image loadedImage = toBufferedImage(image);
        img2.setIcon(new ImageIcon(loadedImage));
    }
    
    static boolean resizeIfNeeded(Mat img, int desiredWidth, int desiredHeight) {
    Size size = img.size();
    Size desiredSize = new Size(desiredWidth, desiredHeight);
    if (size.width != desiredWidth || size.height != desiredHeight) {
        Imgproc.resize(img, img, desiredSize);
        return true;
    }
    return false;
}
}
